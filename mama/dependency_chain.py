import os, concurrent.futures
from .build_target import BuildTarget
from .build_dependency import BuildDependency
from .util import save_file_if_contents_changed
from .system import console


def get_cmake_path_list(paths):
    pathlist = '' 
    for path in paths: pathlist += f'\n    "{path}"'
    return pathlist

def get_target_mama_cmake(target):
    cmd = f'# Package {target.name}\n'
    includes = get_cmake_path_list(target.exported_includes)
    libs     = get_cmake_path_list(target.exported_libs)
    cmd += f'set(MAMA_INCLUDES ${{MAMA_INCLUDES}} {includes})\n'
    cmd += f'set(MAMA_LIBS     ${{MAMA_LIBS}}     {libs})\n'
    return cmd

def prepare_mama_cmake_for_build(target: BuildTarget):
    mama_cmake = ''
    for dependency in target.added_deps:
        mama_cmake += get_target_mama_cmake(dependency.target)
    # Note: Always save mama.cmake to handle dependency removal
    prolog = '# This file is auto-generated by mama build. Do not modify by hand!\n'
    prolog += 'set(MAMA_INCLUDES "")\n'
    prolog += 'set(MAMA_LIBS     "")\n'
    mama_cmake = prolog + mama_cmake
    save_file_if_contents_changed(f'{target.dep.src_dir}/mama.cmake', mama_cmake)

def load_dependencies(target: BuildTarget):
    futures = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=8) as e:
        for dependency in target.added_deps:
            futures.append(e.submit(dependency.load))
    changed = False
    for f in futures: changed |= f.result()
    return changed

def prepare_target(target: BuildTarget):
    # prepare dependencies
    target.dependencies()
    deps_changed = load_dependencies(target)

    reconfigure = target.config.configure and target.config.target == target.name
    if not deps_changed and not reconfigure:
        return False

    if not os.path.exists(target.dep.build_dir):
        os.makedirs(target.dep.build_dir, exist_ok=True)
    return True

def load_dependency_chain(root_dependency: BuildDependency):
    root_target = root_dependency.target
    prepare_target(root_target)
    for dependency in root_target.added_deps:
        dependency.create_build_target()
        load_dependency_chain(dependency)


def build_dependency_chain(root_dependency: BuildDependency):
    target = root_dependency.target
    for dep in target.added_deps:
        build_dependency_chain(dep)
    
    prepare_mama_cmake_for_build(target)
    target.build_target()
